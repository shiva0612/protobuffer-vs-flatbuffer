//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: ser

package models

import (
	context "context"
	flatbuffers "github.com/google/flatbuffers/go"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Client API for UserAPI service
type UserAPIClient interface {
	Session_charging(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*UserResponse, error)
}

type userAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAPIClient(cc grpc.ClientConnInterface) UserAPIClient {
	return &userAPIClient{cc}
}

func (c *userAPIClient) Session_charging(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/models.UserAPI/Session_charging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAPI service
type UserAPIServer interface {
	Session_charging(context.Context, *UserRequest) (*flatbuffers.Builder, error)
	mustEmbedUnimplementedUserAPIServer()
}

type UnimplementedUserAPIServer struct {
}

func (UnimplementedUserAPIServer) Session_charging(context.Context, *UserRequest) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Session_charging not implemented")
}

func (UnimplementedUserAPIServer) mustEmbedUnimplementedUserAPIServer() {}

type UnsafeUserAPIServer interface {
	mustEmbedUnimplementedUserAPIServer()
}

func RegisterUserAPIServer(s grpc.ServiceRegistrar, srv UserAPIServer) {
	s.RegisterService(&_UserAPI_serviceDesc, srv)
}

func _UserAPI_Session_charging_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).Session_charging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.UserAPI/Session_charging",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).Session_charging(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}
var _UserAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.UserAPI",
	HandlerType: (*UserAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Session_charging",
			Handler:    _UserAPI_Session_charging_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
	},
}
