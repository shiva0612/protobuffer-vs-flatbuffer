// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserResponseT struct {
	FirstName string `json:"first_name"`
	LastName string `json:"last_name"`
	MiddleName string `json:"middle_name"`
	UserId string `json:"user_id"`
	Email string `json:"email"`
	Phone string `json:"phone"`
	Dob string `json:"dob"`
	City string `json:"city"`
	State string `json:"state"`
	Country string `json:"country"`
}

func (t *UserResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	firstNameOffset := builder.CreateString(t.FirstName)
	lastNameOffset := builder.CreateString(t.LastName)
	middleNameOffset := builder.CreateString(t.MiddleName)
	userIdOffset := builder.CreateString(t.UserId)
	emailOffset := builder.CreateString(t.Email)
	phoneOffset := builder.CreateString(t.Phone)
	dobOffset := builder.CreateString(t.Dob)
	cityOffset := builder.CreateString(t.City)
	stateOffset := builder.CreateString(t.State)
	countryOffset := builder.CreateString(t.Country)
	UserResponseStart(builder)
	UserResponseAddFirstName(builder, firstNameOffset)
	UserResponseAddLastName(builder, lastNameOffset)
	UserResponseAddMiddleName(builder, middleNameOffset)
	UserResponseAddUserId(builder, userIdOffset)
	UserResponseAddEmail(builder, emailOffset)
	UserResponseAddPhone(builder, phoneOffset)
	UserResponseAddDob(builder, dobOffset)
	UserResponseAddCity(builder, cityOffset)
	UserResponseAddState(builder, stateOffset)
	UserResponseAddCountry(builder, countryOffset)
	return UserResponseEnd(builder)
}

func (rcv *UserResponse) UnPackTo(t *UserResponseT) {
	t.FirstName = string(rcv.FirstName())
	t.LastName = string(rcv.LastName())
	t.MiddleName = string(rcv.MiddleName())
	t.UserId = string(rcv.UserId())
	t.Email = string(rcv.Email())
	t.Phone = string(rcv.Phone())
	t.Dob = string(rcv.Dob())
	t.City = string(rcv.City())
	t.State = string(rcv.State())
	t.Country = string(rcv.Country())
}

func (rcv *UserResponse) UnPack() *UserResponseT {
	if rcv == nil { return nil }
	t := &UserResponseT{}
	rcv.UnPackTo(t)
	return t
}

type UserResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsUserResponse(buf []byte, offset flatbuffers.UOffsetT) *UserResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUserResponse(buf []byte, offset flatbuffers.UOffsetT) *UserResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UserResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UserResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UserResponse) FirstName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserResponse) LastName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserResponse) MiddleName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserResponse) UserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserResponse) Email() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserResponse) Phone() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserResponse) Dob() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserResponse) City() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserResponse) State() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserResponse) Country() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func UserResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func UserResponseAddFirstName(builder *flatbuffers.Builder, firstName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(firstName), 0)
}
func UserResponseAddLastName(builder *flatbuffers.Builder, lastName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(lastName), 0)
}
func UserResponseAddMiddleName(builder *flatbuffers.Builder, middleName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(middleName), 0)
}
func UserResponseAddUserId(builder *flatbuffers.Builder, userId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(userId), 0)
}
func UserResponseAddEmail(builder *flatbuffers.Builder, email flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(email), 0)
}
func UserResponseAddPhone(builder *flatbuffers.Builder, phone flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(phone), 0)
}
func UserResponseAddDob(builder *flatbuffers.Builder, dob flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(dob), 0)
}
func UserResponseAddCity(builder *flatbuffers.Builder, city flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(city), 0)
}
func UserResponseAddState(builder *flatbuffers.Builder, state flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(state), 0)
}
func UserResponseAddCountry(builder *flatbuffers.Builder, country flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(country), 0)
}
func UserResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
